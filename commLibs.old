#! /usr/bin/env python

print('\n\033[1m#######THESE MODULES ARE NATIVE TO PYTHON#######\033[0m\n')
print('\033[1m PPRINT\033[0m is a module that is an intelligent print function that makes it easier to display text and data, like aligning for more readability, \n i.e.\033[1m from pprint import print \033[0m \n')
print('\033[1m SYS\033[0m is a module that allows you to interact wiht the python interpreter and manipulate view values \n i.e.\033[1m import sys \033[0m \n')
print('The\033[1m OS\033[0m module gives you access to the underlying operating system environment and file system. It allows you to open files and interact with OS variables. \n i.e.\033[1m import os \033[0m \n')
print('\033[1m DATETIME\033[0m is a module that allows you to create, format, and work with calendar dates and time. It also enables timestamps and other useful additions to logging and data. \n i.e.\033[1m import datetime \033[0m \n')
print('\033[1m TIME\033[0m This module allows you to add time-based delays and clock capabilities to your python apps. \n i.e.\033[1m import time \033[0m \n')
print('\033[1m JSON\033[0m This is a standard library module foir reading JSON-formatted data sources easily converting them to dictionaries. Use the following command to import this: \n i.e.\033[1m import json \033[0m \n')
print('\033[1m CSV\033[0m This is a standard library module for understanding CSV files. It is useful for exporting Excel spreadsheets into a format that you can then import into Python as a data source. It can, for example, read in a CSV file and use it as a Python list data type.  \n i.e.\033[1m import csv \033[0m \n')
print('\033[1m UNITTEST\033[0m This standard library testing module is used to test the functionality of Python code. It is often used for automated code testing and as part of test-driven development (TDD) methodologies. \n i.e.\033[1m import unittest \033[0m \n')
print('\033[1m#######THESE ARE MODULES YOU\'LL NEED TO INSTALL WITH PIP BEFORE IMPORTING#######\033[0m\n')
print('\033[1m XMLTODICT\033[0m This transfers standard XML into a standard Python dictionary format, key/value pairs, and then back to XML if needed.\n i.e.\033[1m #pip install xmltodict\033[0m, then in your Python file\033[1m import xmltodict \033[0m \n')
print('\033[1m PyYAML\033[0m This converts YAML files into Python objects that can be converted to Python dictionaries or lists.\n i.e.\033[1m #pip install PyYAML\033[0m, then in your Python file\033[1m import yaml \033[0m \n')
print('\033[1m PYANG\033[0m This isn\'t a typical module that you import into a Python program. It\'s a utility written in Python that you can use to verify your YANG models, create YANG code, and transform YANG models into other data structures, such as XSD \n i.e.\033[1m #pip install pyang\033[0m\n')
print('\033[1m REQUESTS\033[0m This is a full library to interact with HTTP services, and it\'s used extensivly to interact with REST APIs, Puts and Gets\n i.e.\033[1m #pip install requests\033[0m, then in your Python file\033[1m import requests\033[0m \n')
print('\033[1m NCCLIENT\033[0m This is a full Python library that helps with client-side scripting and application integration for the NETCONF protocol\n i.e.\033[1m #pip install ncclient\033[0m, then in your Python file\033[1m from ncclient import manager\033[0m \n')
print('\033[1m NETMIKO\033[0m This is a connection-handling library that makes it easier to initaite SSH connections to network devices. This module is intended to help bridge the programmability gap between devices with APIs and those without APIs that still rely on commanbd-line interfaces and commands. It relies on the paramiko module anbd works with multiple vendor platforms.\n i.e.\033[1m #pip install netmiko\033[0m, then in your Python file\033[1m from netmiko import ConnectHandler\033[0m \n')
print('\033[1m PYSNMP\033[0m This is a Python implementation of an SNMP engine for network management. IT allows you to interact with older infrastructure components without APIs but that do support SNMP for management.\n i.e.\033[1m #pip install pysnmp\033[0m, then in your Python file\033[1m import pysnmp\033[0m \n')
print('\033[1m NAPALM\033[0m (Network Automation Programmbility Abstraction Layer with Mulitvendor Support) is a Python module that provides functionality that works in a mulitivendor fashion.\n i.e.\033[1m #pip install napalm\033[0m, then in your Python file\033[1m import napalm\033[0m \n')
print('\033[1m NORNIR\033[0m This is an extendable, multithreaded framework with inventory management to work with large numbers of netowrk devices.\n i.e.\033[1m #pip install nornir\033[0m, then in your Python file\033[1m from nornir.core import InitNornir\033[0m \n')
print('\033[1m PYATS\033[0m This module was a gift from Cisco to the development community. Originally named Genie, it was an internal testing framework used by Cisco developers to validate their code for Cisco products. Pyats is an incredible framework for constructing automated testing for Infrastructure as Code (IaC)\n i.e.\033[1m #pip install pyats\033[0m\n')
